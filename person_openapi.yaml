openapi: 3.0.1
info:
  title: Person
  version: 0.1.0

servers:
  - url: "{scheme}://{host}{basePath}"
    description: Dynamisk server-URL för lokal & Choreo
    variables:
      scheme:
        default: http
        enum:
          - http
          - https
      host:
        default: localhost:8080
        enum:
          - localhost:8080
          - 6de04eb5-ff57-4d64-b80e-6284e10f8dc5-dev.e1-eu-north-azure.choreoapis.dev
      basePath:
        default: /person
        enum:
          - /person
          - /full-stack-test-project/person/v1.0

paths:
  /hamtaPerson:
    get:
      operationId: getHamtaperson
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/person'
              example:
                id: 1
                forNamn: "Anna"
                mellanNamn: "Maria"
                efterNamn: "Svensson"
                postOrt: "Örebro"
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'

  /hamtaPersonByPersonnummer:
      get:
        operationId: gethamtaPersonByPersonnummer
        parameters:
          - name: idBet
            in: query
            required: true
            schema:
              type: integer
              format: int64
        responses:
          "200":
            description: Ok
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/person'
                example:
                  idBet: 196802031512
                  forNamn: "Anna"
                  mellanNamn: "Maria"
                  efterNamn: "Svensson"
                  postOrt: "Örebro"
          "400":
            description: BadRequest
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ErrorPayload'

  /skapaPerson:
    post:
      operationId: postSkapaperson
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person'
            example:
              forNamn: "Joachim"
              efterNamn: "Denner"
              postOrt: "Örebro"
              postNr: "70210"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Person skapad"
                id: 42
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'

  /hamtaAllaPersonerSortByIdAsc:
    get:
      operationId: getHamtaallapersonersortbyidasc
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/person'
              example:
                - id: 1
                  forNamn: "Anna"
                  efterNamn: "Svensson"
                - id: 2
                  forNamn: "Joachim"
                  efterNamn: "Denner"

  /hamtaAllaPersonerSortByEfternamnAsc:
    get:
      operationId: getHamtaallapersonersortbyefternamnasc
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/person'
              example:
                - id: 2
                  forNamn: "Joachim"
                  efterNamn: "Andersson"
                - id: 1
                  forNamn: "Anna"
                  efterNamn: "Svensson"

  /uppdateraPerson:
    put:
      operationId: putUppdateraperson
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/person'
            example:
              forNamn: "Joachim"
              efterNamn: "Denner"
              postOrt: "Stockholm"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Person uppdaterad"
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'

  /tabortPerson:
    delete:
      operationId: deleteTabortperson
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
              example:
                message: "Person borttagen"
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorPayload'

components:
  schemas:
    ErrorPayload:
      required:
        - message
        - method
        - path
        - reason
        - status
        - timestamp
      type: object
      properties:
        timestamp:
          type: string
        status:
          type: integer
          format: int64
        reason:
          type: string
        message:
          type: string
        path:
          type: string
        method:
          type: string

    person:
      type: object
      required:
        - aviseringsNamn
        - careOf
        - code
        - efterNamn
        - folkBokforingsDatum
        - folkBokforingsTyp
        - forNamn
        - forsamling
        - hanvisningsNummer
        - idBet
        - kodTilltalsNamn
        - kommun
        - lan
        - mellanNamn
        - postNr
        - postOrt
        - sekretessMark
        - skapadDatum
        - skyddadFolkBokforing
        - typAvIdBet
        - uppdateradDatum
        - utdelningsadress1
        - utdelningsadress2
      properties:
        id:
          type: integer
          format: int64
        careOf:
          type: string
          nullable: true
        utdelningsadress1:
          type: string
          nullable: true
        utdelningsadress2:
          type: string
          nullable: true
        postNr:
          type: string
          nullable: true
        postOrt:
          type: string
          nullable: true
        forNamn:
          type: string
          nullable: true
        mellanNamn:
          type: string
          nullable: true
        efterNamn:
          type: string
          nullable: true
        aviseringsNamn:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
        kodTilltalsNamn:
          type: string
          nullable: true
        lan:
          type: string
          nullable: true
        kommun:
          type: string
          nullable: true
        forsamling:
          type: string
          nullable: true
        folkBokforingsDatum:
          type: string
          nullable: true
        folkBokforingsTyp:
          type: string
          nullable: true
        typAvIdBet:
          type: string
          nullable: true
        idBet:
          type: string
          nullable: true
        hanvisningsNummer:
          type: string
          nullable: true
        sekretessMark:
          type: string
          nullable: true
        skyddadFolkBokforing:
          type: string
          nullable: true
        skapadDatum:
          type: string
          nullable: true
        uppdateradDatum:
          type: string
          nullable: true
      additionalProperties: false
